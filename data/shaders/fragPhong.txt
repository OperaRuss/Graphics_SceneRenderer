#version 330 core

in vec3 Normal;
in vec3 FragPos;

struct Material {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
};

struct Light {
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

uniform vec3 viewPos;
uniform Material material;
uniform Light light;
uniform bool withBlinn;
uniform float screenGamma;

out vec4 FragColor;

void main(){
    // general variables
    vec3 ambient, diffuse, specular;
    float spec;
    vec3 normal = normalize(Normal);
    vec3 lightDir = normalize(light.position - FragPos);
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, normal);
    vec3 halfwayDir = normalize(lightDir + viewDir);
    float lambertian = max(dot(lightDir, normal), 0.0);

    // ambient light calculation
    ambient = light.ambient * material.ambient;

    if(lambertian > 0.0){
        // diffuse light calculation
        diffuse = light.diffuse * (lambertian * material.diffuse);

        // specular light calculation
        if(withBlinn){
            spec = pow(max(dot(normal, halfwayDir), 0.0), 4.0 * material.shininess);
        }
        else{
            spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
        }
        specular = light.specular * (spec * material.specular);
    }
    else{
        specular = vec3(0.0);
        diffuse = vec3(0.0);
    }

    // Gamma Correction
    vec3 colorLinear = ambient + diffuse + specular;
    vec3 colorGammaCorrected = pow(colorLinear, vec3(1.0 / screenGamma));
    FragColor = vec4(colorGammaCorrected, 1.0);
}